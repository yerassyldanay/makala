// Code generated by MockGen. DO NOT EDIT.
// Source: ./provider/feedstore/interface.go

// Package mock_feedstore is a generated GoMock package.
package mock_feedstore

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	inmemory "github.com/yerassyldanay/makala/pkg/constx/inmemory"
)

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// CopyFeed mocks base method.
func (m *MockStorer) CopyFeed(ctx context.Context, fromThis, toThis inmemory.FeedVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFeed", ctx, fromThis, toThis)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFeed indicates an expected call of CopyFeed.
func (mr *MockStorerMockRecorder) CopyFeed(ctx, fromThis, toThis interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFeed", reflect.TypeOf((*MockStorer)(nil).CopyFeed), ctx, fromThis, toThis)
}

// CreatePost mocks base method.
func (m *MockStorer) CreatePost(ctx context.Context, version inmemory.FeedVersion, score float64, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, version, score, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockStorerMockRecorder) CreatePost(ctx, version, score, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockStorer)(nil).CreatePost), ctx, version, score, id)
}

// GetFeed mocks base method.
func (m *MockStorer) GetFeed(ctx context.Context, feedVersion inmemory.FeedVersion, page, count int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", ctx, feedVersion, page, count)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockStorerMockRecorder) GetFeed(ctx, feedVersion, page, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockStorer)(nil).GetFeed), ctx, feedVersion, page, count)
}

// GetFeedLength mocks base method.
func (m *MockStorer) GetFeedLength(ctx context.Context, feedVersion inmemory.FeedVersion) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedLength", ctx, feedVersion)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedLength indicates an expected call of GetFeedLength.
func (mr *MockStorerMockRecorder) GetFeedLength(ctx, feedVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedLength", reflect.TypeOf((*MockStorer)(nil).GetFeedLength), ctx, feedVersion)
}

// GetUpdateAt mocks base method.
func (m *MockStorer) GetUpdateAt(ctx context.Context) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateAt", ctx)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetUpdateAt indicates an expected call of GetUpdateAt.
func (mr *MockStorerMockRecorder) GetUpdateAt(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateAt", reflect.TypeOf((*MockStorer)(nil).GetUpdateAt), ctx)
}

// RemovePostsWithMinScore mocks base method.
func (m *MockStorer) RemovePostsWithMinScore(ctx context.Context, feedVersion inmemory.FeedVersion, maxElements int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePostsWithMinScore", ctx, feedVersion, maxElements)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePostsWithMinScore indicates an expected call of RemovePostsWithMinScore.
func (mr *MockStorerMockRecorder) RemovePostsWithMinScore(ctx, feedVersion, maxElements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePostsWithMinScore", reflect.TypeOf((*MockStorer)(nil).RemovePostsWithMinScore), ctx, feedVersion, maxElements)
}

// SetUpdateAt mocks base method.
func (m *MockStorer) SetUpdateAt(ctx context.Context, updatedAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpdateAt", ctx, updatedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUpdateAt indicates an expected call of SetUpdateAt.
func (mr *MockStorerMockRecorder) SetUpdateAt(ctx, updatedAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdateAt", reflect.TypeOf((*MockStorer)(nil).SetUpdateAt), ctx, updatedAt)
}
