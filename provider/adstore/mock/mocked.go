// Code generated by MockGen. DO NOT EDIT.
// Source: ./provider/adstore/interface.go

// Package mock_adstore is a generated GoMock package.
package mock_adstore

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// CountAds mocks base method.
func (m *MockStorer) CountAds(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAds", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAds indicates an expected call of CountAds.
func (mr *MockStorerMockRecorder) CountAds(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAds", reflect.TypeOf((*MockStorer)(nil).CountAds), ctx)
}

// CreateAd mocks base method.
func (m *MockStorer) CreateAd(ctx context.Context, postId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAd", ctx, postId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAd indicates an expected call of CreateAd.
func (mr *MockStorerMockRecorder) CreateAd(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAd", reflect.TypeOf((*MockStorer)(nil).CreateAd), ctx, postId)
}

// GetAds mocks base method.
func (m *MockStorer) GetAds(ctx context.Context, offset, count int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAds", ctx, offset, count)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAds indicates an expected call of GetAds.
func (mr *MockStorerMockRecorder) GetAds(ctx, offset, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAds", reflect.TypeOf((*MockStorer)(nil).GetAds), ctx, offset, count)
}

// GetUserIndex mocks base method.
func (m *MockStorer) GetUserIndex(ctx context.Context, author string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIndex", ctx, author)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIndex indicates an expected call of GetUserIndex.
func (mr *MockStorerMockRecorder) GetUserIndex(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIndex", reflect.TypeOf((*MockStorer)(nil).GetUserIndex), ctx, author)
}

// SetUserIndex mocks base method.
func (m *MockStorer) SetUserIndex(ctx context.Context, author string, index int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserIndex", ctx, author, index)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserIndex indicates an expected call of SetUserIndex.
func (mr *MockStorerMockRecorder) SetUserIndex(ctx, author, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserIndex", reflect.TypeOf((*MockStorer)(nil).SetUserIndex), ctx, author, index)
}
