// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/postfeed/interface.go

// Package mock_postfeed is a generated GoMock package.
package mock_postfeed

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	poststore "github.com/yerassyldanay/makala/provider/poststore"
	model "github.com/yerassyldanay/makala/server/rest/model"
	model0 "github.com/yerassyldanay/makala/service/postfeed/model"
)

// MockPoster is a mock of Poster interface.
type MockPoster struct {
	ctrl     *gomock.Controller
	recorder *MockPosterMockRecorder
}

// MockPosterMockRecorder is the mock recorder for MockPoster.
type MockPosterMockRecorder struct {
	mock *MockPoster
}

// NewMockPoster creates a new mock instance.
func NewMockPoster(ctrl *gomock.Controller) *MockPoster {
	mock := &MockPoster{ctrl: ctrl}
	mock.recorder = &MockPosterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoster) EXPECT() *MockPosterMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPoster) CreatePost(ctx context.Context, args poststore.CreateParams) (poststore.FeedPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, args)
	ret0, _ := ret[0].(poststore.FeedPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPosterMockRecorder) CreatePost(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPoster)(nil).CreatePost), ctx, args)
}

// GetChunkByChunk mocks base method.
func (m *MockPoster) GetChunkByChunk(ctx context.Context, page, count int32) ([]poststore.FeedPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChunkByChunk", ctx, page, count)
	ret0, _ := ret[0].([]poststore.FeedPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChunkByChunk indicates an expected call of GetChunkByChunk.
func (mr *MockPosterMockRecorder) GetChunkByChunk(ctx, page, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunkByChunk", reflect.TypeOf((*MockPoster)(nil).GetChunkByChunk), ctx, page, count)
}

// GetFeed mocks base method.
func (m *MockPoster) GetFeed(ctx context.Context, args model0.GetFeedParams) (model.GetFeedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", ctx, args)
	ret0, _ := ret[0].(model.GetFeedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockPosterMockRecorder) GetFeed(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockPoster)(nil).GetFeed), ctx, args)
}
